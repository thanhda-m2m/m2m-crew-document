/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InitAppearance
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");
var import_path = __toESM(require("path"));
var import_fs = __toESM(require("fs"));

// src/setting-tab-display.ts
var import_obsidian = require("obsidian");
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "Style Sync by ThanhDA" });
    containerEl.createEl("p", {
      text: "C\u1EA5u h\xECnh giao di\u1EC7n khi l\u1EA7n \u0111\u1EA7u m\u1EDF \u1EE9ng d\u1EE5ng."
    });
    containerEl.createEl("p", {
      text: "\u0110\xE2y l\xE0 ti\u1EBFn tr\xECnh ch\u1EC9 ch\u1EA1y m\u1ED9t l\u1EA7n t\u1EF1 \u0111\u1ED9ng. B\u1EA1n kh\xF4ng c\u1EA7n ph\u1EA3i l\xE0m g\xEC c\u1EA3 v\xE0 c\xF3 th\u1EC3 b\u1ECF qua setting n\xE0y."
    });
    new import_obsidian.Setting(containerEl);
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  alreadySet: false
};
var InitAppearance = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.basePath = this.app.vault.adapter.basePath;
    const initAppearanceFilePath = import_path.default.join(this.basePath, ".obsidian", "appearance_init.json");
    const targetAppearanceFilePath = import_path.default.join(this.basePath, ".obsidian", "appearance.json");
    if (!this.settings.alreadySet) {
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      import_fs.default.copyFileSync(initAppearanceFilePath, targetAppearanceFilePath);
      this.settings.alreadySet = true;
      await this.saveSettings();
      new ResyncModal(this.app).open();
    }
  }
  /**
   * Nếu chưa có thì tạo file appearance.json
   */
  // checkIfFileExists(filePath: string): boolean {
  // 	if (!fs.existsSync(filePath)) {
  // 		fs.writeFileSync(filePath, '');
  // 		return false;
  // 	}
  //
  // 	return true;
  // }
  // async notifyRestartApplication() {
  // 	new Notice("Đã đồng bộ xong, vui lòng khởi động lại ứng dụng!", 12000);
  // }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ResyncModal = class extends import_obsidian2.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Ti\u1EBFn tr\xECnh kh\u1EDFi t\u1EA1o \u0111\xE3 xong, vui l\xF2ng kh\u1EDFi \u0111\u1ED9ng l\u1EA1i \u1EE9ng d\u1EE5ng!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
